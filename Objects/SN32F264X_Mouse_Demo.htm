<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Objects\SN32F264X_Mouse_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Objects\SN32F264X_Mouse_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sat Oct 21 13:03:43 2017
<BR><P>
<H3>Maximum Stack Usage =         92 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; USB_EP0SetupEvent &rArr; USB_StandardRequest &rArr; USB_GetDescriptorEvent &rArr; USB_TableTransmit &rArr; USB_Comb_Bytetoword
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[e]">I2C0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">I2C0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f]">CT16B0_IRQHandler</a> from timer.o(.text) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[10]">CT16B1_IRQHandler</a> from ct16b1.o(.text) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from main.o(.text) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[e]">I2C0_IRQHandler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[12]">LVD_IRQHandler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[b]">NDT_IRQHandler</a> from main.o(.text) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[16]">P0_IRQHandler</a> from usbhw.o(.text) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[15]">P1_IRQHandler</a> from usbhw.o(.text) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[14]">P2_IRQHandler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[13]">P3_IRQHandler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[d]">SPI0_IRQHandler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from main.o(.text) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[c]">USB_IRQHandler</a> from usbhw.o(.text) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[11]">WDT_IRQHandler</a> from startup_sn32f260.o(.ARM.__at_0x000000D8) referenced from startup_sn32f260.o(RESET)
 <LI><a href="#[18]">__main</a> from __main.o(!!!main) referenced from startup_sn32f260.o(.ARM.__at_0x000000D8)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_sn32f260.o(.ARM.__at_0x000000C0))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>P3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sn32f260.o(.ARM.__at_0x000000D8))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1c]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[b3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[21]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[be]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[26]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ca]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[cb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[cc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[cd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[cf]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[22]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MN_KeyScanState &rArr; MS_CheckMatrixState &rArr; KB_ConvertUsbUsage &rArr; MS_BufferUsbKey &rArr; MS_SensorDPISetting_by_SPI &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[25]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[d3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[27]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9d]"></a>Goto_Bootloader</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbuser.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0InEvent
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Reaction
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[29]"></a>WDT_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = main &rArr; MN_KeyScanState &rArr; MS_CheckMatrixState &rArr; KB_ConvertUsbUsage &rArr; MS_BufferUsbKey &rArr; MS_SensorDPISetting_by_SPI &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_RamInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GpioInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_WheelState
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_SensorState
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_LEDState
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_KeyScanState
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_IdleState
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_BootState
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B1_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d5]"></a>SysTick_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>NDT_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[b]"></a>NDT_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>MN_LEDState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>LED_Mode_Spectrum_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_ReInit
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[2f]"></a>LED_Init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LED_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Spectrum_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>LED_Mode_Static_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_ReInit
</UL>

<P><STRONG><a name="[3e]"></a>LED_Mode_Reaction_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_ReInit
</UL>

<P><STRONG><a name="[3c]"></a>LED_SettingDefaultColor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Breath_Init
</UL>

<P><STRONG><a name="[3b]"></a>LED_Mode_Breath_Init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SettingDefaultColor
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_ReInit
</UL>

<P><STRONG><a name="[3d]"></a>LED_Mode_ReInit</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Breath_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Reaction_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Static_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Spectrum_Init
</UL>

<P><STRONG><a name="[40]"></a>LED_Effect_Breath</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_EffectRandomValueGen
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Breath
</UL>

<P><STRONG><a name="[43]"></a>LED_ReflashPWMDuty</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Static
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Reaction
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Spectrum
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Breath
</UL>

<P><STRONG><a name="[42]"></a>LED_Mode_Breath</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ReflashPWMDuty
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Effect_Breath
</UL>

<P><STRONG><a name="[45]"></a>LED_EffectSpectrumProcess</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Spectrum
</UL>

<P><STRONG><a name="[44]"></a>LED_Mode_Spectrum</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_EffectSpectrumProcess
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ReflashPWMDuty
</UL>

<P><STRONG><a name="[46]"></a>LED_Mode_Reaction</STRONG> (Thumb, 260 bytes, Stack size 168 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_EffectRandomValueGen
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ReflashPWMDuty
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[49]"></a>LED_PWMBuf_Update</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Static
</UL>

<P><STRONG><a name="[48]"></a>LED_Mode_Static</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_PWMBuf_Update
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ReflashPWMDuty
</UL>

<P><STRONG><a name="[41]"></a>LED_EffectRandomValueGen</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, led_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Mode_Reaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Effect_Breath
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_BootState
</UL>

<P><STRONG><a name="[4a]"></a>MS_SuspendSetting</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, boot_idle_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_SuspendSetting &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx10us
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNms
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_W_2BYTE
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SetWheelIOSuspend
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SetRowPullUp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SetRowInputMode
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_BootState
</UL>

<P><STRONG><a name="[33]"></a>MN_BootState</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, boot_idle_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MN_BootState &rArr; MS_Init &rArr; MS_SensorInit &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SuspendSetting
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_EffectRandomValueGen
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>MN_IdleState</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, boot_idle_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MN_IdleState &rArr; USB_EP2Function &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP2Function
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP1Function
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>MS_GpioInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mouse.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>MS_RamInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_RamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>MS_BufferUsbKey</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_BufferUsbKey &rArr; MS_SensorDPISetting_by_SPI &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SensorDPISetting_by_SPI
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_NFirePage
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_ConvertUsbUsage
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_NFireState
</UL>

<P><STRONG><a name="[58]"></a>MS_NFireState</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_NFireState &rArr; MS_BufferUsbKey &rArr; MS_SensorDPISetting_by_SPI &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BufferUsbKey
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_KeyScanState
</UL>

<P><STRONG><a name="[59]"></a>KB_ConvertUsbUsage</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KB_ConvertUsbUsage &rArr; MS_BufferUsbKey &rArr; MS_SensorDPISetting_by_SPI &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BufferUsbKey
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_CheckMatrixState
</UL>

<P><STRONG><a name="[5a]"></a>MS_CheckMatrixState</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MS_CheckMatrixState &rArr; KB_ConvertUsbUsage &rArr; MS_BufferUsbKey &rArr; MS_SensorDPISetting_by_SPI &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_ConvertUsbUsage
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_KeyScanState
</UL>

<P><STRONG><a name="[5c]"></a>KB_CheckDebounce</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KB_CheckDebounce
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ScanState
</UL>

<P><STRONG><a name="[5b]"></a>MS_ScanState</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_ScanState &rArr; KB_CheckDebounce
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CheckDebounce
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_KeyScanState
</UL>

<P><STRONG><a name="[37]"></a>MN_KeyScanState</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MN_KeyScanState &rArr; MS_CheckMatrixState &rArr; KB_ConvertUsbUsage &rArr; MS_BufferUsbKey &rArr; MS_SensorDPISetting_by_SPI &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ScanState
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_CheckMatrixState
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_NFireState
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>KB_KeyMerge</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mouse.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>MN_WheelState</STRONG> (Thumb, 652 bytes, Stack size 8 bytes, mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MN_WheelState &rArr; MS_WheelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WheelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>MS_TimerInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mouse_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[60]"></a>MS_SensorInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mouse_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_SensorInit &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx10us
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNms
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_W_2BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[62]"></a>MS_SetWheelIOPullUp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mouse_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WheelInit
</UL>

<P><STRONG><a name="[61]"></a>MS_SetWheelIOInputMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mouse_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WheelInit
</UL>

<P><STRONG><a name="[5d]"></a>MS_WheelInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mouse_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_WheelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SetWheelIOInputMode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SetWheelIOPullUp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx10us
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_WheelState
</UL>

<P><STRONG><a name="[52]"></a>MS_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mouse_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_Init &rArr; MS_SensorInit &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SensorInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TimerInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WheelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_BootState
</UL>

<P><STRONG><a name="[57]"></a>MS_SensorDPISetting_by_SPI</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mouse_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_SensorDPISetting_by_SPI &rArr; SPI_W_2BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_W_2BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BufferUsbKey
</UL>

<P><STRONG><a name="[56]"></a>MS_NFirePage</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mouse_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BufferUsbKey
</UL>

<P><STRONG><a name="[4c]"></a>MS_SetRowPullUp</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, mouse_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SuspendSetting
</UL>

<P><STRONG><a name="[4b]"></a>MS_SetRowInputMode</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, mouse_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SuspendSetting
</UL>

<P><STRONG><a name="[4e]"></a>MS_SetWheelIOSuspend</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, mouse_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SuspendSetting
</UL>

<P><STRONG><a name="[36]"></a>MN_SensorState</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mouse_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MN_SensorState &rArr; SPI_R_BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_R_BYTE
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Burst_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>SPI0_Write_2Byte</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, mouse_sensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx1us
</UL>

<P><STRONG><a name="[67]"></a>SPI_Read_1Byte</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, mouse_sensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx5us
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx1us
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx10us
</UL>

<P><STRONG><a name="[31]"></a>CT16B1_Init</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, ct16b1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_BootState
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>CT16B1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ct16b1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>CT16B1_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ct16b1.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>SPI0_Init</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, spi0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>SPI0_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, spi0.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>SPI0_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi0.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>SSP0_InterruptDisEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi0.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>SPI_W_2BYTE</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, spi0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_W_2BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SensorInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SensorDPISetting_by_SPI
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SuspendSetting
</UL>

<P><STRONG><a name="[63]"></a>SPI_R_BYTE</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, spi0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_R_BYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx10us
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_SensorState
</UL>

<P><STRONG><a name="[64]"></a>SPI_Burst_Read</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, spi0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Burst_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx10us
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_SensorState
</UL>

<P><STRONG><a name="[5f]"></a>Timer_Init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TimerInit
</UL>

<P><STRONG><a name="[f]"></a>CT16B0_IRQHandler</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USB_EP1Function</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usbepfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP1Function &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBMAIN_WriteFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_IdleState
</UL>

<P><STRONG><a name="[54]"></a>USB_EP2Function</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, usbepfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP2Function &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBMAIN_WriteFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_IdleState
</UL>

<P><STRONG><a name="[6c]"></a>USB_EPnINFunction</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, usbepfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBMAIN_WriteFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>

<P><STRONG><a name="[2c]"></a>USB_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_Init &rArr; UT_MAIN_DelayNms
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardVar_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HidVar_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>P1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>P0_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>Remote_Wakeup_Setting</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Remote_Wakeup_Setting
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
</UL>

<P><STRONG><a name="[80]"></a>USB_EP4AckEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>USB_EP3AckEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>USB_EP2AckEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>USB_EP1AckEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>USB_EPnStall</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEvent
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0SetupEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0InEvent
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnINFunction
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP2Function
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP1Function
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportEvent
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdleEvent
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocolEvent
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportEvent
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetIdleEvent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetProtocolEvent
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatusEvent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearFeatureEvent
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetFeatureEvent
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptorEvent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDescriptorEvent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfigurationEvent
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInterfaceEvent
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterfaceEvent
</UL>

<P><STRONG><a name="[73]"></a>USB_ReturntoNormal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReturntoNormal
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeupEvent
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
</UL>

<P><STRONG><a name="[c]"></a>USB_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USB_IRQHandler &rArr; USB_EP0SetupEvent &rArr; USB_StandardRequest &rArr; USB_GetDescriptorEvent &rArr; USB_TableTransmit &rArr; USB_Comb_Bytetoword
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_INT_DelayNx10us
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SuspendEvent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SOFEvent
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResumeEvent
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEvent
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0SetupEvent
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0OutEvent
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0InEvent
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReturntoNormal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP1AckEvent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP2AckEvent
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP3AckEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP4AckEvent
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sn32f260.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>USB_DelayKstate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RemoteWakeUp
</UL>

<P><STRONG><a name="[82]"></a>USB_DelayJstate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RemoteWakeUp
</UL>

<P><STRONG><a name="[81]"></a>USB_RemoteWakeUp</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_RemoteWakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DelayJstate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DelayKstate
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
</UL>

<P><STRONG><a name="[84]"></a>USB_SwitchtoSlow</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
</UL>

<P><STRONG><a name="[51]"></a>USB_Suspend</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_Suspend &rArr; USB_ReturntoNormal
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SwitchtoSlow
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RemoteWakeUp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReturntoNormal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Wakeup_Setting
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx10us
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MN_BootState
</UL>

<P><STRONG><a name="[8c]"></a>USB_ClrEPnToggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterfaceEvent
</UL>

<P><STRONG><a name="[8a]"></a>USB_EPnDisable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEvent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfigurationEvent
</UL>

<P><STRONG><a name="[90]"></a>USB_EPnNak</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0SetupEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfigurationEvent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfigurationEvent
</UL>

<P><STRONG><a name="[6a]"></a>USB_EPnAck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0OutEvent
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnINFunction
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP2Function
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP1Function
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportInputIF2Event
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportInputEvent
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportOutputEvent
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportFeatureEvent
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportInputIF1Event
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdleEvent
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocolEvent
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportFeatureEvent
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportOutputEvent
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetIdleEvent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetProtocolEvent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatusEvent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearFeatureEvent
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetFeatureEvent
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddressEvent
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TableTransmit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfigurationEvent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfigurationEvent
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInterfaceEvent
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterfaceEvent
</UL>

<P><STRONG><a name="[86]"></a>fnUSBMAIN_ReadFIFO</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnWriteByteData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnReadWordData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnReadByteData
</UL>

<P><STRONG><a name="[85]"></a>USB_EPnReadByteData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBMAIN_ReadFIFO
</UL>

<P><STRONG><a name="[87]"></a>USB_EPnReadWordData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBMAIN_ReadFIFO
</UL>

<P><STRONG><a name="[69]"></a>fnUSBMAIN_WriteFIFO</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnWriteWordData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnWriteByteData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnINFunction
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP2Function
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP1Function
</UL>

<P><STRONG><a name="[88]"></a>USB_EPnWriteByteData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBMAIN_ReadFIFO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBMAIN_WriteFIFO
</UL>

<P><STRONG><a name="[89]"></a>USB_EPnWriteWordData</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBMAIN_WriteFIFO
</UL>

<P><STRONG><a name="[9b]"></a>fnUSBINT_ReadFIFO</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0SetupEvent
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0OutEvent
</UL>

<P><STRONG><a name="[8e]"></a>fnUSBINT_WriteFIFO</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0InEvent
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportOutputEvent
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdleEvent
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocolEvent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatusEvent
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TableTransmit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfigurationEvent
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInterfaceEvent
</UL>

<P><STRONG><a name="[79]"></a>USB_ResetEvent</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ResetEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnDisable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>USB_SuspendEvent</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>USB_ResumeEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>USB_WakeupEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReturntoNormal
</UL>

<P><STRONG><a name="[78]"></a>USB_SOFEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>USB_SetInterfaceEvent</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetInterfaceEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrEPnToggle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[8d]"></a>USB_GetInterfaceEvent</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_GetInterfaceEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_WriteFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[8f]"></a>USB_SetConfigurationEvent</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetConfigurationEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnNak
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnDisable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[91]"></a>USB_GetConfigurationEvent</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_GetConfigurationEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_WriteFIFO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnNak
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[92]"></a>USB_SetDescriptorEvent</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetDescriptorEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[94]"></a>USB_Comb_Bytetoword</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_Comb_Bytetoword
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TableTransmit
</UL>

<P><STRONG><a name="[93]"></a>USB_TableTransmit</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_TableTransmit &rArr; USB_Comb_Bytetoword
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_WriteFIFO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Comb_Bytetoword
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0InEvent
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptorEvent
</UL>

<P><STRONG><a name="[95]"></a>USB_GetDescriptorEvent</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_GetDescriptorEvent &rArr; USB_TableTransmit &rArr; USB_Comb_Bytetoword
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TableTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[96]"></a>USB_SetAddressEvent</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SetAddressEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[97]"></a>USB_SetFeatureEvent</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetFeatureEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[98]"></a>USB_ClearFeatureEvent</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ClearFeatureEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[99]"></a>USB_GetStatusEvent</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_GetStatusEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_WriteFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[9a]"></a>USB_StandardRequest</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_StandardRequest &rArr; USB_GetDescriptorEvent &rArr; USB_TableTransmit &rArr; USB_Comb_Bytetoword
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatusEvent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearFeatureEvent
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetFeatureEvent
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddressEvent
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptorEvent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDescriptorEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfigurationEvent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfigurationEvent
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInterfaceEvent
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterfaceEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0SetupEvent
</UL>

<P><STRONG><a name="[77]"></a>USB_EP0SetupEvent</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_EP0SetupEvent &rArr; USB_StandardRequest &rArr; USB_GetDescriptorEvent &rArr; USB_TableTransmit &rArr; USB_Comb_Bytetoword
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_ReadFIFO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnNak
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>USB_EP0InEvent</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_EP0InEvent &rArr; USB_TableTransmit &rArr; USB_Comb_Bytetoword
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_WriteFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TableTransmit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Bootloader
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>USB_EP0OutEvent</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0OutEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_ReadFIFO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>USB_StandardVar_Init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[9e]"></a>HID_SetProtocolEvent</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_SetProtocolEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
</UL>

<P><STRONG><a name="[9f]"></a>HID_SetIdleEvent</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_SetIdleEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
</UL>

<P><STRONG><a name="[a0]"></a>HID_SetReportOutputEvent</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_SetReportOutputEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportEvent
</UL>

<P><STRONG><a name="[a1]"></a>HID_SetReportFeatureEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_SetReportFeatureEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportEvent
</UL>

<P><STRONG><a name="[a2]"></a>HID_SetReportEvent</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HID_SetReportEvent &rArr; HID_SetReportFeatureEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportFeatureEvent
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportOutputEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
</UL>

<P><STRONG><a name="[a3]"></a>HID_GetProtocolEvent</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetProtocolEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_WriteFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
</UL>

<P><STRONG><a name="[a4]"></a>HID_GetIdleEvent</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetIdleEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_WriteFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
</UL>

<P><STRONG><a name="[a5]"></a>HID_GetReportInputIF1Event</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetReportInputIF1Event &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportEvent
</UL>

<P><STRONG><a name="[a6]"></a>HID_GetReportFeatureEvent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetReportFeatureEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportEvent
</UL>

<P><STRONG><a name="[a7]"></a>HID_GetReportOutputEvent</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetReportOutputEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnUSBINT_WriteFIFO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportEvent
</UL>

<P><STRONG><a name="[a8]"></a>HID_GetReportInputEvent</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetReportInputEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportEvent
</UL>

<P><STRONG><a name="[a9]"></a>HID_GetReportEvent</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HID_GetReportEvent &rArr; HID_GetReportInputEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportInputEvent
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportOutputEvent
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportFeatureEvent
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportInputIF1Event
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
</UL>

<P><STRONG><a name="[9c]"></a>USB_HIDRequest</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_HIDRequest &rArr; HID_GetReportEvent &rArr; HID_GetReportInputEvent &rArr; USB_EPnAck
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnStall
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReportEvent
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdleEvent
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocolEvent
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReportEvent
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetIdleEvent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetProtocolEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0SetupEvent
</UL>

<P><STRONG><a name="[aa]"></a>HID_GetReportInputIF2Event</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hiduser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPnAck
</UL>

<P><STRONG><a name="[6e]"></a>USB_HidVar_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[76]"></a>UT_INT_DelayNx10us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_INT_DelayNms
</UL>

<P><STRONG><a name="[ab]"></a>UT_INT_DelayNms</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_INT_DelayNx10us
</UL>

<P><STRONG><a name="[4d]"></a>UT_MAIN_DelayNx10us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_R_BYTE
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Burst_Read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_1Byte
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SensorInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WheelInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SuspendSetting
</UL>

<P><STRONG><a name="[50]"></a>UT_MAIN_DelayNms</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UT_MAIN_DelayNms
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UT_MAIN_DelayNx10us
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SensorInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SuspendSetting
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[68]"></a>UT_MAIN_DelayNx5us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_1Byte
</UL>

<P><STRONG><a name="[66]"></a>UT_MAIN_DelayNx1us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_1Byte
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Write_2Byte
</UL>

<P><STRONG><a name="[ac]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, system_sn32f260.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_sn32f260.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReturntoNormal
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[24]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HIDRequest
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StandardRequest
</UL>

<P><STRONG><a name="[e5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDT_Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[71]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P0_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P1_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Wakeup_Setting
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[6f]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Wakeup_Setting
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P0_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P1_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[af]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
